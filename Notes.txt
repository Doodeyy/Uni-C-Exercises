float: %f
double: %lf
int: %d
long int: %ld

rand() % 20 - random int from 0 to 19 - <stdlib.h>

struct foititis
{
    char name[50];
    int aM;
    int kM;
    double bTh;
    double bErg;
};


foititis gemismaPedion( char n[], int am, int km, double bth, double berg)
{
    struct foititis f;
    strcpy(f.name, n);
    f.aM = am;
    f.kM = km;
    f.bTh = bth;
    f.bErg = berg;
    return f;
}




switch (case)
{
    case a:
        break;
    case b:
        break;
    default:
        break;
}

void thisIsFunction(int rows, int cols, int oof[rows][cols])
{
    int i;
    int j;
    for (i = 0; i < rows; i++)
    {
        for (j = 0; j < cols; j++)
        {
            oof[i][j] = rand() % 100;
        }
    }
}

int rows = 10;
int oof[rows];
thisIsFunction(rows,oof);


system("pause");





Binary Search:
int binSearchPThesiNum(int num, int n, int p[])
{
    int a=0, t=n-1, m;
    int thesiNum = -1;
    while ( a<=t && thesiNum == -1)
    {
        m = (a+t)/2;
        if ( num == p[m] )
            thesiNum = m;
        else
            if ( num < p[m] )
                t = m-1;
            else
                a = m+1;
        printf("a = %d t = %d\n",a,t);
    }
    return thesiNum;
}

Bubble Sort:
for (plithos = n-1;plithos >= 1;plithos--)
{
    for (i = 0;i<=plithos-1 >= 1;i++)
        if ( p[i] > p[i+1] )
            swapPiPj(i, i+1, p);
    printf("bhma = %d p = ", n-plithos);
    showPin( n, p);
}

#include <stdbool.h>
 
// Main Function
int main()
{
      // Boolean data types declared
    bool a = true;
    bool b = false;
 
    printf("True : %d\n", a);
    printf("False : %d", b);
 
    return 0;
}